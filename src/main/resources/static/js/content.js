


/*
세션 로그인만 사용하는 경우
전통적인 방식이며, 일반적으로 모놀리식(단일 서버) 구조의 웹 애플리케이션에 적합합니다.
방식: 사용자가 로그인하면 서버에 세션 정보가 저장되고, 브라우저에 세션 ID 쿠키를 발급합니다. 이후 모든 요청은 이 쿠키를 통해 사용자를 식별합니다.
특징:
상태 관리: 서버가 사용자의 상태(로그인 여부 등)를 직접 관리합니다.
보안: 세션 정보는 서버에만 존재하므로, HttpOnly 쿠키를 함께 사용하면 XSS 공격으로부터 안전합니다.
단점: 서버가 여러 대로 확장될 경우, 세션 정보를 공유하는 별도의 저장소(예: Redis)가 필요해 복잡성이 증가합니다. 
JWT만 사용하는 경우
세션 방식을 사용하지 않고 JWT만을 인증 수단으로 사용하는 방식입니다. 마이크로서비스, RESTful API, 모바일 앱 등 무상태(stateless) 환경에 적합합니다. 
방식: 사용자가 로그인하면 서버는 JWT를 발급하고, 클라이언트는 이 토큰을 저장합니다. 이후 요청 시마다 토큰을 헤더에 담아 전송하며, 서버는 토큰의 유효성만 검증합니다.
특징:
무상태: 서버는 상태를 저장하지 않아 확장성이 매우 뛰어납니다.
토큰 탈취 위험: 토큰이 탈취되면 만료될 때까지 유효하므로, 보안을 위해 토큰 만료 시간을 짧게 설정하고 리프레시 토큰을 사용하는 전략이 필요합니다.
단점: 토큰의 길이가 길어질수록 HTTP 요청 헤더의 크기가 커질 수 있습니다. 
세션 로그인과 JWT를 혼합하는 경우
기존의 세션 로그인 시스템이 있는데, **연계 시스템(예: 모바일 앱, 외부 API)**을 위해 JWT를 추가로 사용하는 경우입니다. 
배경: 기존 웹사이트는 세션 기반으로 운영하되, API 통신이 필요한 외부 서비스(예: 다른 서버 또는 모바일 클라이언트)를 위해 JWT 인증을 허용하는 것입니다. 이렇게 하면 기존 시스템은 그대로 유지하면서 확장성을 확보할 수 있습니다.
동작 방식:
웹 브라우저: 일반적인 웹 페이지 접근은 세션 쿠키를 사용해 인증을 처리합니다.
API/모바일: 외부 연계 시스템은 별도의 JWT 인증 API를 통해 토큰을 발급받고, 이 토큰을 사용해 API에 접근합니다.
장점:
호환성: 기존 시스템의 안정성을 유지하면서 새로운 환경에 대응할 수 있습니다.
유연성: 각 시스템의 특성에 맞게 가장 효율적인 인증 방식을 적용할 수 있습니다. 
요약: 어떤 방식을 선택해야 할까요?
세션만 사용: 단일 웹 서버를 기반으로 하는 소규모 애플리케이션이나, 사용자 상태를 서버에서 엄격하게 관리해야 하는 경우에 적합합니다.
JWT만 사용: 마이크로서비스나 분산 시스템, 모바일 앱 등 확장성이 중요한 환경에 적합합니다. 서버가 사용자 상태를 유지하지 않아도 됩니다.
혼합 사용: 기존의 세션 기반 시스템이 존재하지만, API를 통한 외부 연동이나 모바일 클라이언트를 지원해야 하는 경우에 유용합니다. 
AI 대답에는 오류가 있을 수 있습니다. 자세히 알아보기




undefined
undefined
undefined
사이트 18개
JWT vs Session authentication - Logto blog
2024. 12. 16. — Session-based authentication requires the serve...
파비콘
Logto blog

Jwt를 활용한 로그인을 구현하기 - 코드 저장소
2024. 5. 30. — ... Jwt방식을 사용하면 서버는 비밀키만 알고 있으면 되기 때문에 세션 방식과 같이...
파비콘
티스토리

[Spring Security] JWT을 이용한 소셜 로그인 구현 - 코딩몽키졸업
2023. 1. 31. — JWT이란? Json Web Token의 약자로서 암호화된 데이터를 전송하기 위한 Js...
파비콘
티스토리

모두 표시
앞으로의 대세는?
웹 보안 및 인증 분야의 트렌드는 애플리케이션의 아키텍처와 요구사항에 따라 가장 적합한 방식을 선택하는 유연성으로 이동하고 있습니다. JWT는 확장성 때문에 많은 현대적 웹 애플리케이션의 표준이 되었지만, 세션 기반 인증은 여전히 특정 환경에서 강력한 장점을 가집니다. 
전반적인 추세는 다음과 같습니다.
1. JWT 기반 인증의 대중화 및 고도화
무상태(Stateless) 아키텍처: 마이크로서비스, RESTful API, 서버리스 아키텍처 등에서 JWT는 서버가 사용자 세션 상태를 유지할 필요가 없어 높은 확장성과 유연성을 제공합니다.
리프레시 토큰(Refresh Token): JWT의 취약점을 보완하기 위해, 짧은 만료 기간의 액세스 토큰과 긴 만료 기간의 리프레시 토큰을 조합하는 방식이 보편화되었습니다. 리프레시 토큰은 사용자의 재로그인 없이 새로운 액세스 토큰을 발급받을 수 있게 해줍니다.
보안 강화: JWT를 탈취당했을 때의 위험을 최소화하기 위해, 리프레시 토큰을 DB에 저장하고 재사용 여부를 추적하거나, 액세스 토큰을 HttpOnly 쿠키에 담아 XSS 공격을 방어하는 등의 기법이 활용됩니다. 
2. 세션 기반 인증의 여전한 강점
강력한 세션 제어: 세션은 서버에서 관리되므로, 사용자의 즉각적인 로그아웃이나 세션 무효화가 필요한 시나리오에 유리합니다.
보안: 서버 측에서 모든 세션 정보를 관리하기 때문에 HttpOnly 쿠키를 사용하면 XSS 공격으로부터 비교적 안전합니다.
적합한 환경: 단일 서버로 구성된 모놀리식 애플리케이션이나, 서버에서 사용자 상태를 엄격하게 제어해야 하는 환경에 여전히 효율적인 방식입니다. 
3. 인증 방식의 융합과 새로운 기술 등장 
점점 더 많은 웹 애플리케이션이 하이브리드 방식을 채택하고 있습니다. 
API 연동: 기존 세션 기반 웹 서비스에 API 통신이 필요한 외부 서비스(모바일 앱, 연동 시스템)를 위해 JWT 인증을 추가하는 경우가 많습니다.
비밀번호 없는(Passwordless) 인증: 패스워드 없이 생체 인식(지문, 얼굴), 이메일 링크, 매직 링크, FIDO2 표준의 패스키 등을 활용하는 방식이 대세로 떠오르고 있습니다.
다중 요소 인증(MFA)의 확대: MFA는 보안을 강화하는 필수적인 수단으로 자리 잡았으며, 향후에는 사용자 행동 기반 분석을 통해 지속적으로 인증을 확인하는 방향으로 발전할 것입니다.
AI 기반 인증: AI를 활용해 사용자의 평소 행동 패턴을 학습하고 이상 행동을 탐지하여 인증을 강화하는 기술이 부상하고 있습니다. 
결론: 상황에 맞는 선택이 곧 대세
따라서 하나의 방식만이 대세라고 단정하기보다는, 애플리케이션의 요구사항과 구조에 따라 가장 효율적이고 안전한 인증 방식을 선택하는 것이 앞으로의 추세입니다. 
확장성과 유연성이 중요하다면 JWT 기반 인증을,
세션 제어 및 보안이 중요하다면 세션 기반 인증을,
기존 시스템과 연동이 필요하거나 특정 클라이언트만 무상태 인증을 사용해야 한다면 혼합 방식을 선택하는 것이 현명한 접근법입니다.
궁극적으로는 편의성과 보안을 동시에 만족시키는 패스워드리스 및 MFA 기술이 인증의 미래를 주도할 것입니다. 
*/